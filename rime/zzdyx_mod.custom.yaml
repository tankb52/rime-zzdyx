patch:
  switches:
    - name: show_emoji
      reset: 1
      states: [ "😐", "😊" ]
    - name: ascii_mode
      reset: 0
      states: [ 🇨🇳, 🇺🇸 ]
    - name: ascii_punct
      reset: 0
      states: [ 。, ． ]
        #见源码 https://github.com/fcitx/fcitx5-rime/blob/a5b5bf9f3928c1e9aebd95ed35f6be43d496f3e7/src/rimeengine.cpp#L696
        #如果想要获得通知，可以使用"!simplification"这个名字
    - name: "!simplification"
      reset: 0
      states: [ 汉, 漢 ]
    - name: full_shape
      reset: 0
      states: [ ◑ , ● ]

# 0.15.0.0后增加的系统托盘功能，仅适用于小狼毫
  "schema/icon": "icons/zzd.ico"
  "schema/ascii_icon": "icons/en.ico"

  "style/horizontal": true      #候选词显示方式，true为横排，false竖排
  menu:
    page_size: 6                #候选词数量

  engine/translators/+:
    - "history_translator@history"      #重复输入
    - "lua_translator@helper"
    - "lua_translator@time_date"
  engine/filters:                #滤镜，每一项在下面单独设定功能
    - simplifier
    - "simplifier@emoji_cn"
    #- "lua_filter@emoji_reduce_filter"
    - uniquifier    #去重，需要放在列表最后面，且对emoji无效

#opencc功能：emoji表情
  emoji_cn:
    opencc_config: emoji.json
    option_name: show_emoji
    tags: abc
    tag: emoji
    tips: all

  #emoji_reduce:                       # Emoji 降频到第 idx 个位置
    #idx: 4


#opencc功能：简繁转换
  simplifier:
    opencc_config: s2t.json
    option_name: "!simplification"

#z键历史输入重复上屏
  history:
    input: z
    size: 1 #重复前几次上屏
    initial_quality: 1 #为0时重码居后

#自定义热键
  key_binder:
    import_preset: default
    bindings:
      - {accept: semicolon, send: 2, when: has_menu} #分號選第二重碼
      - {accept: apostrophe, send: 3, when: has_menu} #引號選第三重碼
      - {accept: ".", send: 2, when: has_menu} #手机上句号第二重碼
      #- {accept: ",", send: 3, when: has_menu} #手机上逗号第三重碼
      - {accept: "Shift+space", toggle: noop, when: always}
      - {accept: "Control+Shift+4", toggle: "!simplification", when: always}
      - {accept: "Control+Shift+dollar", toggle: "!simplification", when: always}
      - {accept: "Control+Shift+F", toggle: "!simplification", when: always}
      #横排时上下翻页左右选择
      - {accept: Left, send: Up, when: composing}
      - {accept: Right, send: Down, when: composing}
      - {accept: Up, send: Page_Up, when: composing}
      - {accept: Down, send: Page_Down, when: composing}

